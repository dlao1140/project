Basic Authentication
-사용자 이름 / 비밀번호를 Base64로 인코딩하여 Authorization 헤더에 포함하여 전송됨
-매우 안전하지않음, SSL/TLS와 함께 사용됨

Authorization: Basic~~~~

Bearer Token Authentication
-헤더에 토큰을 포함하여 전송 Authorization 헤더에 포함하여 전송
-JWT방식을 사용하여 인증
-간단한 방식, 상태를 유지하지 않음, 확장성이 높음
-토큰 노출 위험, 토큰관리 힘듬(귀찮다)

Authorization: Bearer ~~~~

OAuth
-토큰기반 인증 방식, 사용자가 직접 자격을 증명하는것이아닌 미리 인증 받아서 토큰을 발급받고
-이 토큰을 이용하여 API를 요청하는 방식 OAuth 2.0(현재사용중인것)
Ex)kakao / Naver / Git / Facebook 로그인 등등

API Key 이용한 방식 / Session based Authentication

JWT: 클레임이라고 불리는 정보를 JSON 형태로 안전하게 전송하기위한 토큰기반의 표준
-안증과 정보 교환에 사용, 서명이 되어 있어서 신뢰성 확보가 가능

1.Header : 토큰의 타입과 사용된 알고리즘 정보를 담고있음, Base64Url로 인코딩
2.Payload : 클레임 정보, 대상, 발행자, 만료 시간 등 다양한 정보가 포함됨, BAse64Url로 인코딩
3.Signature : Header와 Payload, Secret Key를 사용하여 생성된 서명

인증, 정보교환에 많이 사용

JWT 장점
-상태 유지 X:
-간단하고 자기 포함적(자기가 필요한 모든정보를 다가지고있음)
-확장성 높음(토큰 만들어 놓으면 다른 서버에서도 사용가능)

단점
-크기: 클레임이 많을 수록 토큰의 크기가 커짐
-보안: 서명은 되어있지만 암호화는 되어있지않아 중요한 정보를 JWT에 포함하면 안됨
-토큰 관리: 만료시간 잘 확인해줘야함, 갱신 잘 해줘야함
